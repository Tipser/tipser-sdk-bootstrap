{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","tipserSdkConfig","posId","lang","env","TipserEnv","dev","primaryColor","modalUi","hideSearchIcon","hideFavouritesIcon","hideCartIcon","hideMoreIcon","hideSimilarProducts","tipserSdk","TipserSDK","App","state","cartSize","updateCartSize","getCurrentCartSize","then","setState","addToCart","addToCartAndOpenCheckout","openDirectToCheckoutDialog","this","className","src","logo","alt","variant","color","onClick","openPurchaseDialog","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,kSCSrCC,EAAmC,CACrCC,MAAO,2BACPC,KAAM,QACNC,IAAKC,YAAUC,IACfC,aAAc,OACdC,QAAS,CACLC,gBAAgB,EAChBC,oBAAoB,EACpBC,cAAc,EACdC,cAAc,EACdC,qBAAqB,IAIvBC,EAAYC,oBAhBJ,2BAgBqBd,GAoDpBe,E,2MAjDXC,MAAQ,CACJC,SAAU,G,EAOdC,eAAiB,WACbL,EAAUM,qBAAqBC,MAAK,SAAAH,GAAQ,OAAI,EAAKI,SAAS,CAAEJ,iB,EAGpEK,UAAY,WACRT,EAAUS,UAAU,4BAA4BF,KAAK,EAAKF,iB,EAG9DK,yBAA2B,WACvBV,EAAUW,2BAA2B,4BAA4BJ,KAAK,EAAKF,iB,mFAZ3EO,KAAKP,mB,+BAgBL,OACI,yBAAKQ,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,yBACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oCAEJ,yBAAKH,UAAU,yBACX,kBAAC,IAAD,CAAQI,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMnB,EAAUoB,uBAArE,iBAEI,kBAAC,IAAD,MACCR,KAAKT,MAAMC,SAAW,GAAKQ,KAAKT,MAAMC,YAInD,yBAAKS,UAAU,QACX,kBAAC,IAAD,CAAQI,QAAQ,YAAYC,MAAM,UAAUC,QAASP,KAAKH,WAA1D,oBAGA,kBAAC,IAAD,CAAQQ,QAAQ,YAAYC,MAAM,UAAUC,QAASP,KAAKF,0BAA1D,4C,GAzCFW,IAAMC,WCbJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.94c38e46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TipserSDK, TipserSdkConfig, TipserEnv, TipserLang } from '@tipser/tipser-sdk';\nimport Button from '@material-ui/core/Button';\nimport ShoppingBasket from '@material-ui/icons/ShoppingBasket';\n\nconst posId = '5075d7715c3d090a90585e87';\n\nconst tipserSdkConfig: TipserSdkConfig = {\n    posId: '45cbc4a0e4123f6920000002',\n    lang: 'en-US',\n    env: TipserEnv.dev,\n    primaryColor: '#f00',\n    modalUi: {\n        hideSearchIcon: true,\n        hideFavouritesIcon: true,\n        hideCartIcon: true,\n        hideMoreIcon: true,\n        hideSimilarProducts: true,\n    },\n};\n\nconst tipserSdk = TipserSDK(posId, tipserSdkConfig);\n\nclass App extends React.Component {\n    state = {\n        cartSize: 0,\n    };\n\n    componentDidMount() {\n        this.updateCartSize();\n    }\n\n    updateCartSize = () => {\n        tipserSdk.getCurrentCartSize().then(cartSize => this.setState({ cartSize }));\n    };\n\n    addToCart = () => {\n        tipserSdk.addToCart('5ba2334a781baa0001ccdf33').then(this.updateCartSize);\n    };\n\n    addToCartAndOpenCheckout = () => {\n        tipserSdk.openDirectToCheckoutDialog('5ba2334a781baa0001ccdf33').then(this.updateCartSize);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"App-header__container\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <p>Shop</p>\n                    </div>\n                    <div className=\"App-header__container\">\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => tipserSdk.openPurchaseDialog()}>\n                            Open shop cart\n                            <ShoppingBasket />\n                            {this.state.cartSize > 0 && this.state.cartSize}\n                        </Button>\n                    </div>\n                </header>\n                <div className=\"main\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.addToCart}>\n                        Add to cart item\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.addToCartAndOpenCheckout}>\n                        Add to cart item and open checkout\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}