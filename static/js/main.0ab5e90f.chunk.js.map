{"version":3,"sources":["App.tsx","serviceWorker.js","index.js","logo.svg"],"names":["tipserSdkConfig","posId","lang","env","TipserEnv","dev","primaryColor","modalUi","hideSearchIcon","hideFavouritesIcon","hideCartIcon","hideMoreIcon","hideSimilarProducts","tipserSdk","TipserSDK","App","state","cartSize","updateCartSize","getCurrentCartSize","then","setState","addToCart","addToCartAndOpenCheckout","openDirectToCheckoutDialog","this","className","src","logo","alt","variant","color","onClick","openPurchaseDialog","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"mSASMA,EAAmC,CACrCC,MAAO,2BACPC,KAAM,QACNC,IAAKC,YAAUC,IACfC,aAAc,OACdC,QAAS,CACLC,gBAAgB,EAChBC,oBAAoB,EACpBC,cAAc,EACdC,cAAc,EACdC,qBAAqB,IAIvBC,EAAYC,oBAhBJ,2BAgBqBd,GAoDpBe,E,2MAjDXC,MAAQ,CACJC,SAAU,G,EAOdC,eAAiB,WACbL,EAAUM,qBAAqBC,MAAK,SAAAH,GAAQ,OAAI,EAAKI,SAAS,CAAEJ,iB,EAGpEK,UAAY,WACRT,EAAUS,UAAU,4BAA4BF,KAAK,EAAKF,iB,EAG9DK,yBAA2B,WACvBV,EAAUW,2BAA2B,4BAA4BJ,KAAK,EAAKF,iB,mFAZ3EO,KAAKP,mB,+BAgBL,OACI,yBAAKQ,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,yBACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oCAEJ,yBAAKH,UAAU,yBACX,kBAAC,IAAD,CAAQI,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMnB,EAAUoB,uBAArE,iBAEI,kBAAC,IAAD,MACCR,KAAKT,MAAMC,SAAW,GAAKQ,KAAKT,MAAMC,YAInD,yBAAKS,UAAU,QACX,kBAAC,IAAD,CAAQI,QAAQ,YAAYC,MAAM,UAAUC,QAASP,KAAKH,WAA1D,oBAGA,kBAAC,IAAD,CAAQQ,QAAQ,YAAYC,MAAM,UAAUC,QAASP,KAAKF,0BAA1D,4C,GAzCFW,IAAMC,WCbJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.0ab5e90f.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TipserSDK, TipserSdkConfig, TipserEnv, TipserLang } from '@tipser/tipser-sdk';\nimport Button from '@material-ui/core/Button';\nimport ShoppingBasket from '@material-ui/icons/ShoppingBasket';\n\nconst posId = '5075d7715c3d090a90585e87';\n\nconst tipserSdkConfig: TipserSdkConfig = {\n    posId: '45cbc4a0e4123f6920000002',\n    lang: 'en-US',\n    env: TipserEnv.dev,\n    primaryColor: '#f00',\n    modalUi: {\n        hideSearchIcon: true,\n        hideFavouritesIcon: true,\n        hideCartIcon: true,\n        hideMoreIcon: true,\n        hideSimilarProducts: true,\n    },\n};\n\nconst tipserSdk = TipserSDK(posId, tipserSdkConfig);\n\nclass App extends React.Component {\n    state = {\n        cartSize: 0,\n    };\n\n    componentDidMount() {\n        this.updateCartSize();\n    }\n\n    updateCartSize = () => {\n        tipserSdk.getCurrentCartSize().then(cartSize => this.setState({ cartSize }));\n    };\n\n    addToCart = () => {\n        tipserSdk.addToCart('5ba2334a781baa0001ccdf33').then(this.updateCartSize);\n    };\n\n    addToCartAndOpenCheckout = () => {\n        tipserSdk.openDirectToCheckoutDialog('5ba2334a781baa0001ccdf33').then(this.updateCartSize);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"App-header__container\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <p>Shop</p>\n                    </div>\n                    <div className=\"App-header__container\">\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => tipserSdk.openPurchaseDialog()}>\n                            Open shop cart\n                            <ShoppingBasket />\n                            {this.state.cartSize > 0 && this.state.cartSize}\n                        </Button>\n                    </div>\n                </header>\n                <div className=\"main\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.addToCart}>\n                        Add to cart item\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.addToCartAndOpenCheckout}>\n                        Add to cart item and open checkout\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}